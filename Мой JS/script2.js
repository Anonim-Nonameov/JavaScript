/*
"Как использовать массивы?" или "Эй-эй-эй - используй массив как массив!"

Настало время опрокинуть несколько слов о том, как правильно и эффетивно исполь-
-зовать массивы! в первую очередь следует отметить то, что массив является объектом
и ведет он себя как объект. Мы уже знаем, что при проверке оператором typeof нам
выдаст "object", поскольку, опять же массив - объект, и что мы можем добавить не-
-числовое свойство. То есть обратиться к массиву, но не ставить квадратные скобки
и вписывать внутрь индекс - мы сразу можем написать некое имя свойства, ключ, а
присвоить ему значение:

 Оператор typeof вернет object по отношению к массиву
let arr = ["Ваня", "Иштван", "Оля"];
console.log(typeof arr);
=> object

---
 Добавление нечислового свойства
arr.name = "Коля"
console.log(arr);
=> (3) ["Ваня", "Иштван", "Оля", name: "Коля"]

Всё это мы уже знаем и это прекрасно! но самая главная особенность массивов - это
их внутреннее представление! движок JavaScript старается хранить элементы массива
в непрерывной области памяти, один за другим. Нет, существуют и другие способы
оптимизации, благодаря которым массивы работают очень быстро, но это - один из
самых лучших (понятия не имею почему, так было сказано :D). Но тем не менее, все
эти способы утратят всю свою эффективность, если мы перестанем работать с массивом
как с массивом, т.е как с упорядоченной коллекцией данных и начнём использовать
его как самый обычный объект. Именно поэтому массив надо использовать как массив!

Вот несколько вариантов НЕПРАВИЛЬНОГО применения массива:

1) - Добавление нечислового свойства (не по индексу), например: arr.test = 5

2) - Создание так называемых "дыр" в массиве, например: arr[0] = "Text" и затем
arr[5] = "Text two". После этого в массиве на месте пропущенных индексов повятся
другие элементы - undefined. Так делать крайне не рекомендуется!

3) - Заполнение массива в обратном, реверсном порядке, например: arr[10] = "Text",
arr[9] = "Text two" и так далее (а так вообще кто-то делает?)

Все эти действия приведут к замедлению массивов, так что вот.

Домашка!!!

1) - Изучить теорию
2) - Решить задачи:

Задача №1 - какое число (длину) мы получим?

let arr = ["Ваня", "Иштван", "Оля"];
let newArr = arr;
newArr.push("Петя");
console.log(arr.length);

Ответ: 4, поскольку newArr является ссылкой на тот же массив arr и его изменение
приведет к изменению общего массива

Задача №2:
Создайте массив users с элементами "Ваня" и "Иштван", затем добавьте "Оля" в конец.
Замените значение "Иштван" на "Петя", и при всё этом ваш код для поиска значения
должен работать для массивов С ЛЮБОЙ ДЛИНОЙ. После этого удалите первый элемент и
покажите его, выведя в консоль. А напоследок - вставьте "Маша" и "Паша" в начало
массива.

Ответ:

let users = ["Ваня", "Иштван"];
users.push("Оля");
users.shift();
console.log(users[0]);
users.unshift("Маша", "Паша");

Остальное - чуть позже!)
*/