// Блок инструкций - это "коробочка" с инструкциями которые мы можем выводить
// неск. раз подряд, и создаётся он ключевым словом function. Тут мы выведем
// окошко с некой надписью и выведем сообщение в консоль -

// function myName() {
// alert('Salam aleykum!')
// console.log('Выведено объявление \"Salam aleykum!\"'); 
// }

// myName();

// myName - название функции, прописав которое мы её и вызываем.
// myName(); - пример вызова функции где нам придёт объявление
// и в консоль будет выведен лог.

// Старый вид блока инструкций

// function sayHello(a, b='Ismail') { alert('Hello ' + a +  ' and ' + b); }

// sayHello('Aslan');

// Новый вид блока инструкций, "стрелочная функция"

// let sayHelloToGasan = (a) => { alert('Hello' + a); }

// sayHelloToGasan(' Gasan');

let a = 5;

do {
    console.log(a);
    a--;
} while(a > 6);

console.log( )

let b = 5;

while (b > 0) {
    console.log(b)
    b--;
}

console.log( )

let c = 10;

if (c === c) {
    while (c > 4) {
        console.log(c)
        c--;
    }
} else {
    console.log('Не выведу!')
}

function numberToText(a) {
    if (a == 1) {
        return 'Один'
    } else if (a == 2) {
        return 'Два'
    } else if (a == 3) {
        return 'Три'
    } else if (a == 4) {
        return 'Четыре'
    } else if (a == 5) {
        return 'Пять'
    } else {
        return 'Простите, я могу переводить цифры в текст только от 1 до 5!'
    }
}

// console.log( );
// console.log(numberToText(2)); => "Два"
// Программа превращает числа в строки (пока что только в диапазоне от 1 до 5)

let user = {
    name: 'Jordan',
    age: 30,
    address: {
        city: 'Baku',
        country: 'Azerbaijan'
    },
}

for (let key in user) {
    console.log( )
    console.log(key, 'AAA')

    console.log( )
    console.log(user[key], 'BBB')
}

let user2 = {
    name: 'Anna',
    age: 23,
    address: {
        city: 'Moscow',
        country: 'Russia',
    },
}

let clone = Object.assign({}, user2)

clone.name = 'Yuliya'
clone.age = '18'

console.log( )
console.log(clone)

// Повтор изученного

// Переменные: что такое переменная, создание переменной, присваивание значений и т.д.

/*

Что такое переменная?
Переменная это такая себе коробочка с некими данными, которые
мы можем использовать в нашем коде.
Мы можем сохранить в переменную любую информацию, будь то объект,
массив, числа/строки и т.д.

Создание переменной и присваивание ей значения

Создаются переменные при помощи ключевого слова, let (кроме let есть еще var,
но он устарел и не рекомендуется его использовать!):

let (имя_переменной);

Имя переменной может содержать только буквы (лучше латинского алфавита),
цифры и символы "$" и "_". При этом первый символ НЕ должен быть цифрой.

Верное объявление:

let age;
let info123;
let i123nfo;
let $size;
let _color;

Неверное объявление:

let 123info;
let my-age;
let 123-my-age;

Чтобы задать переменной значение, надо с новый строки прописать имя переменной
и поставить знак равно, после этого знака мы уже задаем значение:

let number
number = 45

Или

let string
string = "string"

Но, можно написать ещё короче - после создания переменной мы сразу прописываем
знак равно и присваиваем значение:

let children = "Jordan, Anna"

Такой вариант рекомендуется использовать, так как он короче и легче читается.
Ну правда - не надо переводить глаза на новую строку и печатать лишнее.

Кстати, для лучшей читабельности кода названия переменных должны соответствовать их
значениям, ибо другие люди котоыре будут читать наш код не поймут
для чего нам нужна эта переменная.
И правда - допустим мы хотим положить в коробку книжки, и потом отнести
её на склад. Спустя какое-то время нам они понадобились, и мы зашли в склад.
Там полно других коробок и мы будем читать их названия на наклейках,
которые прикреплены к нашим коробкам, чтобы понять какая коробка
нам нужна. Но мы назвали нашу коробку как-то так - "x1dz38", и как нам
теперь понять, что внутри неё лежит?
Чтобы избежать таких проблем, нужно задавать переменным правильные значения.

И раз уж мы заговорили о том, что надо называть переменные более "открыто",
я думаю что стоит поговорить о стилях наименования переменных.

Да-да, существуют СТИЛИ наименования переменных.
Например, CamelCase - «ГорбатыйРегистр», «ВерблюжийРегистр».
Чаще всего используется в JS, реже в других языках программирования.

Как его использовать? - просто бери и используй :D
А если серьезно - то так:

let MyName = "Jordan"

В этом стиле наименования переменных каждое слово начинается с заглавной буквы:

MyName
MyFatherName
MyFatherAndMotherName
т.д.

Но чаще всего используется стиль lowerCamelCase*, который схож с CamelCase, но
отличается от него тем, что первое слово начинается с маленькой
буквы (в отличие от остальных):

myName
myFatherName
myFatherAndMotherName

* - лично я использую именно этот стиль, он мне больше по душе.

Поэтому, вместо...

let s;
let skfkafasafaoapca;
let leftsidebarsize;

...лучше писать так...

let size;
let age;
let leftSideBarSize

... и учитывать регистр...

let height;
let Height;

...ибо регистр в JS имеет значение, и эти две переменные - разные.

Использование других символов

let яПеременная;

Да, помимо латинских символов можно использовать и буквы/символы из других языков,
но так делать не рекомендуется.

*/

// Повтор изученного

// Массивы: что такое массив, как его создавать, его методы и т.д.

/*

Шо такое массив

Массивы - то же самое что и объекты (надеюсь меня не убьют за такие слова),
в них мы можем хранить различные данные - но управлять ими мы можем намного
гибче, нежели в объектах!

И как его создать, массив этот?

Создаются массивы просто - для начала создаем переменную, готовимся поставить
знак равно (оператор присваивания), и после него ставим квадратные скобки.
Но есть и другой, более длинный способ: после знака равно пишем слово new,
затем Array (с большой буквы), после Array сразу ставим круглые скобки и готово.


Заполняем моссев.. мэссив.. маоссэев.. МАССИВ!

Заполняются они также просто, как и создаются. После квадратных скобок мы пишем
любое значение, будь-то числовое или строковое значение, и ставим запятую.
Т.е так: массив = ["значение", "значение", "значение"]. Всё просто!
Но, после последнего значения обычно ставится "висячая" запятая. Она нужна
для того, чтобы если мы будем перемещать элементы (ставить 3-е значение на
место 1-го, и так далее) не возникало никаких ошибок.

Что можно сохранить в массив?

В массиве могут храниться самые-самые разные типы данных - от простейших
чисел до сложных функций и огромных объектов, вот пример такого массива:

let arr = [
    "Коля",
    {
        type: "JS",
        age: 36,
    },
    true,
    function () {
        console.log("Привет, я Коля");
    }
]

Но и это еще не всё - массивы в массиве.
Да, массив может храниться внутри другого! такие массивы называются многомерными,
их элементы такие же массивы как и они сами:

let matrix = [
    [1, 2 ,3],
    [4, 5, 6],
    [7, 8, 9]
]

Получение значений из мОссева!

Вы не поверите (а может и поверите), но мы можем "получить" значение массива и
делать с ним что-то очень интересное! (или не совсем.. кто знает?)
Чтобы получить значение массива, мы прописываем его имя, ставим квадратные
скобки (без пробелов, сразу после имени) и затем внутри квад. скобок пишем
индекс искомого значения. Что такое индекс? - индекс это что-то вроде "позиции"
в массивах и объектах. Важно знать, что индексы начинаются с 0 (да, не с еди-
ницы, а с нуля)! то есть - у первого элемента массива будет нулевой индекс,
у второго - первый, у третьего - второй и т.д:

let arr = ["one", "two", "three"];
console.log(arr[1]);

Код выше создает массив, а затем выводит в консоль слово "two" (т.к индекс
мы указали первый, а первый индекс это элемент №2).
При попытке получить значение, которое не соответствует ни одному значению -
нам выдаст undefined (логично: undefined = не определено).
Получать значения можно также из многомерных мОссевов:

let matrix = [
    [1, 2 ,3],
    [4, 5, 6],
    [7, 8, 9]
]

console.log(matrix[0][1])

Код выше создает мм. массив, затем выводит в консоль цифру 2 (потому что
[0] - первый элемент массива, массив с числами от 1 до 3, а [1] - второй
элемент "дочернего" массива у массива matrix (как бы странно это не звучало)).

Узнаем длину массива, э!

Массивы настолько уникальны, что мы можем УЗНАТЬ ИХ ДЛИНУ! (хотя это не делает
их уникальными.. ну и ладно) Для этого обычно используют свойство length.
Использовать его максимааааааально просто - ставишь точку после названия массива
и готово! вот так вот всё делается:

let arr = [1, 2, 3];
console.log(arr.length);

Код выше выдаст нам цифру 5 в консоль, так как элементов в массиве всего пять.
В общем - простое свойство, очень простое. Ничего сложного в использовании нет.

А на этом наш разговор про массивы - закончен. Получился урок маленьким, бАлею я.
Но как по мне, в этом уроке мы проговорили всё основное и самое базовое, что нужно
знать при работе с массивами. :)

*/