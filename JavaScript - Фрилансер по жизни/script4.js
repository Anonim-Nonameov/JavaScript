// Метод join

// Метод join действует наоборот, он преобразовывает МАССИВ в строку, а не
// строку в массив, также с заданным разделителем.

let arr;
let arrTwo;
let obj;
let str;

arr = ["Ваня", "Иштван", "Оля",];
str = arr.join(",");

console.log( );
console.log(str);
// => "Ваня,Иштван,Оля"

// А теперь получим строку из массива:

arrTwo = ["Ваня", "Иштван", "Оля",];

console.log( );
console.log(String(arrTwo));
// => "Ваня,Иштван,Оля"

// Проверка массива: Array.isArray()

// -------------------------------------------------------

// Перед началом урока вспоминаем, что массивы - не образуют отдельный тип 
// данных, они основаны на другом типе данных. На объектах.

obj = {};
arr = [];

console.log( );
console.log(typeof obj);
// => object (как и ожидали, ничего удивительно)

console.log( );
console.log(typeof arr);
// => object (т.к массивы основываются на объектах)

// -------------------------------------------------------

// Часто бывает так, что у нас есть огромный код, а в нем куча разных объектв,
// строк, чисел и массивов. Это конечно хорошо, но как же нам узнать где массив
// а где нет? а вот для этого существует проверка Array.isArray(), которая
// нам как раз поможет. Синтаксис довольно прост: 

/*

Array.isArray(массив_на_проверку)

*/

// А теперь попрактикуемся!

if (Array.isArray(arr)) {
	console.log( );
	console.log("Это массив!");
} else {
	console.log( );
	console.log("Это не массив :(");
}

// => "Это массив!"

// Если зайти в консоль (любую, node или браузера) то мы увидим, что код отработал
// правильно, без ошибок.

// Перебор элементов

// С массивами можно сделать много чего, мы это уже поняли. Например, мы можем
// "перебрать" элементы какого нибудь массива.
// Для этого обычно используется цикл for:

arr = ["Ваня", "Иштван", "Оля"];

console.log( );
console.log(arr.length); // Узнаем длину массива
// => 3

for (let i = 0; i < arr.length; i++) {
	console.log( );
	console.log(arr[i], "- выведено при помощи простого цикла for"); // - выводим i элемент массива arr в консоль
}

// => {
/*
	"Ваня"

	"Иштван"

	"Оля"
*/
// }

// Ну вот, каждый элемент массива был выведен в консоль.
// Но мы еще можем использовать цикл FOR ... OF, он тут как раз подойдет:

for (let arrItem of arr) {
	console.log( );
	console.log(arrItem, "- а вот это выведено при помощи цикла for...of");
}

// Метод перебора forEach

// До этого мы перебирали массив при помощи циклов, но для перебора массива есть
// специальный метод - forEach.

// Он выполняет функцию для каждого элемента массива (также как и методы find
// findIndex и filter), а синтаксис у него точно такой же как и у find(Index) и
// filter'a (ну я ж говорил :D):

/*

arr.forEach(function (item, index, array) {
	// ... (делаем что-то крутое и интересное с массивом :>)
});

*/

// Попрактикуемся!

arr = ["Ваня", "Иштван", "Оля"];

arr.forEach(function(item, index, array) {
	console.log( );
	console.log(`Элемент "${item}" находится на ${index}-вой позиции в "${array}"`);
});

// => {
/*

	Элемент "Ваня" находится на 0-вой позиции в "Ваня,Иштван,Оля"

	Элемент "Иштван" находится на 1-вой позиции в "Ваня,Иштван,Оля"

	Элемент "Оля" находится на 2-вой позиции в "Ваня,Иштван,Оля"

*/
// }

// Код получился длинным, но оно того стоило - всё подробно описано, где и какой
// элемент лежит, + его позиция.
// Но мы можем написать то же самое, только при помощи стрелочных функций:

arr.forEach((item, index, array) => {
	console.log( );
	console.log(`Элемент "${item}" находится на ${index}-вой позиции в "${array}" - V2`);
});

// Остальное допишу завтра, как раз завтра 1-ый день недели - а значит первый день уроков!
// +, осталось совсем немного и я скоро закончу этот курс!)