// Стили и классы: общая заметка-памятка

// Итак, с практикой и теорией управления классами и стилями элемента мы с вами
// разобрались и уже знаем, как менять классы/стили у элемента, теперь настало
// время сделать общую заметку, в которой я вкратце расскажу о том, что и в
// каких случаях НАДО использовать, а что НЕ НАДО использовать. Начнём с того,
// что мы уже поняли, что из JS мы можем управлять как классами, так и стилями
// объекта, так вот - управление классами наиболее приоритетный вариант, по срав-
// -нению с управлением стилями.

// Манипулировать свойством style надо лишь тогда, когда классы нам помочь ну никак
// не могут. Например, при изменении координатов объекта "на лету".

// Одним словом, если есть возможность возложить решение на плечи CSS, путем
// манипуляции классами - так и следует сделать.

// Свойства и атрибуты

// Чудесно, со стилями и классами мы наконец-то разобрались, теперь мы можем ими
// управлять так, как хотим и никто нам в этом не помешает, а теперь пришла пора
// научиться управлять свойствами и атрибутами DOM-элементов!

// Начнём мы с того, что у разных DOM-элементов могут быть разные СВОЙСТВА. Ну
// например, у тега <a> есть свойства, связанные со ссылками, а у тега <input> -
// свойства, связанные с полем ввода и так далее. Более того - в HTML, у тегов
// могут быть АТРИБУТЫ, и когда браузер "парсит" наш HTML-код (то есть разбирает
// его), чтобы создать DOM-объекты для тегов, он распознаёт стандартные атрибуты
// и создаёт DOM-свойства для них. Также следует отметить, что каждый DOM-узел
// принадлежит соответствующему ему встроенному классу. А теперь к делу!
// Чтобы понять, как всё устроено, посмотрим на пример:

let link = document.querySelector('.lesson__link');
let input = document.querySelector('.lesson__input');

console.log(link.href);
// => https://youtube.com/
console.log(input.href);
// => undefined


// В HTML у нас есть два новых элемента, которые я добавил в связи с тем, что
// именно они потогут нам "войти в тему свойств и атрибутов". В примере выше
// мы создаём две переменные, link и input, в каждую из них мы помещаем те
// два элемента, которые я создал - ссылка это link, и инпут это соответственно
// input. Отлично, и как я уже выше написал, у них могут быть свои специфические
// свойства. Например, у ссылки есть своё свойство href, при вызове которого
// мы можем получить значение одноимённого атрибута, а именно - адрес ссылки,
// его мы и получили в консоли. Но, это свойство присуще только ссылке, у
// других элементов его нет, пример выше это и доказывает: в примере выше
// мы вывели в консоль значение атрибута href, который "есть" у элемента input.
// Но мы же знаем, что такого атрибута у инпута нет и быть не может! поэтому в
// консоли мы получили undefined. А вот у инпута есть своё специфическое свойство,
// value, которое возвращает значение, хранимое в атрибуте value элемента:

console.log(input.value);
// => "Я инпут"
console.log(link.value);
// => undefined

// В итоге в консоль мы получаем два значения: первое значение это строка "Я
// инпут", и эта строка является значением атрибута value элемента input.
// Второе же значение это undefined, которое мы получили вследствие того, что
// у ссылки НЕТ такого атрибута, как value.

// А на этом всё! - остальное позже :)