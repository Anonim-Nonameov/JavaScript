// Домашка

let userName = 'Вася';

let user = userName;

console.log(user);
// Объявляем перем. userName (a) со знач. Вася (1), затем объявляем перем. user
// (b) со значением переменной userName  (a)(a = 1, b = a), затем выводим в
// консоль значение переменной user (1). 

// const myAge  = 36; myAge = 18;

// Этот код выведет ошибку, ведь константу изменить нельзя!


// ~Типы данных~

let string = 'string'; // Строка - string
// Ну, строкой может быть что угодно что находится в кавычках - "" ''. Даже
// пустые кавычки - строка.

let undef; 
console.log(undef);
// Неопределённый - undefined. Выдаётся, когда мы хотим вызвать переменную
// которая на самом деле есть, но значение - неопределено.

let var_null = null; // Ничего - null. 
// Специальное значение, которое - ничего. Переменная объявлена, но значение -
// ничего, ноль.

let yes = true, no = false; // Логический тип, буллин - boolean.
// Имеет лишь 2 значения - true (правда) и false (правда).

let trueOrFalse = 58 < 18; 
console.log(trueOrFalse);
// Переменная может сама получать значение false или true. тут она сама получила
// значение false, ведь 18 МЕНЬШЕ чем 58.

let number = 200; // Число - number
// Число может содержать в себе любые цифры, числа, а также числа с плавающей
// точкой (22.5).

let infin = 15/0; // infinity - number.
// Математическая бесконечность. Есть также -infinity, минус-бесконечность.
// Получить её можно написав let infin = -15/0 и вывести в консоль.

let notAnNumber = 'Hello' / 5; console.log(notAnNumber);
// NaN (not an number - не число) - number. Выдаёт такую вычислительную ошибку
// обычно когда пытаются разделить строку на 5 и т.д. Тип данных - число, хоть
// NaN значит не число. Парадокс.

let bigInteger = 12345678901234567890123456789n; 
console.log(bigInteger);

// bigint - число, но огромное. Выдаётся bigint потому, что в JS тип данных
// number не может содержать числа больше чем 9007199254740991 или меньше
// чем -9007199254740991.

let userInfo = {
 name: 'Ismail',
 age: 14
}
console.log(userInfo);
// Объект - object. Объект это что-то вроде переменной, которая хранит в себе
// несколько значений, свойств. Свойства состоят из бар, двоеточие и значение.
// Тут name - ключ, 'Ismail' - значение.

let id = Symbol('id');
// Символ - symbol. Уникальный айди объекта, скажем так.. его собт. имя.

let funcVar = function name(params) {
  // некий код  
}
// Функция - function. Тот же объект, но просто разный тип данных.


// Преобразование типов (замена их данных)

let userAge = 58; // => число console.log(userAge); 

userAge = String(userAge) // => теперь тип данных переменной - строка.
console.log(userAge);

// Операторы

// В JS есть три группы операторов:
// Базовые операторы
// Операторы сравнения
// Логические операторы

// Термины «унарный», «бинарный», «операнд».

// Операнд - то к чему применяется оператор, операнды ещё
// называют аргументами.
// Например:

userAge = 39 - 9; // => Числа 39 и 9 - операнды

let h = 200, y = 10;

let userHeight = h - y; // => Переменные h и y - операнды

// Бинарными называются операторы которые применяются
// к двум операндам.
// В примере выше оператор вычитания ( - ): бинарный оператор.

// Унарный опператор - который применяется лишь к 1 операнду.
// Например:
let userCash = -800;

// Математические операторы

// В JS есть мат. операторы.
// Например:

let x;

// Оператор сложения: +
x = 5 + 8;

// Оператор вычитания: -
x = 13 - 8;

// Оператор умножения: *
x = 5 * 2;

// Оператор деления: /
x = 10 / 2

// Оператор взятия остатка от деления: %
x = 11 % 3;
// Проверка => 11 / 3 = 3 (2 ост.)

// Оператор возведения в степень: **
x = 3 ** 2;

// Спец. возможности операторов

let resultOne;
let resultTwo;
let resultThree;
let resultFour;
let resultFive;

// Применение оператора сложения к строкам

resultOne = "Ученик" + " " + "по" + " " + "жизни" 
console.log(resultOne);
// Вывод => Ученик по жизни

// Если в выражении есть хоть одна строка (т.е -
// хотя бы один операнд будет строкой) - то конечный
// результат тоже будет строкой.

// ПРИМЕЧАНИЕ: порядок значения не имеет,
// т.е - не важно, первым операндом будет 
// число или строка.

resultTwo = "Ученик " + 18;
console.log(resultTwo);
console.log(typeof resultTwo);
// Вывод => Ученик 18 - тип String.

// Меняем строку и число местами:
resultThree = 18 + " Ученик"
console.log(resultThree);
console.log(typeof resultThree);
// Вывод => 18 Ученик - тип String.

// Казусы.

// Иногда бывает так, что мы из 1-ой цифры можем 
// получить сразу несколько десятков или даже сотен.
// Например - из 2 получить 22, или 222:

resultFour = 2 + "2";
console.log(resultFour);
// Вывод => 22

// Операции до сложения со строкой.

// Операции до сложения со строкой выполняются
// как обычно, даже если мы перед строкой поставим
// какие-то числа для сложения:

resultFive  = 18 - 8 + " Ученик";
console.log(resultFive);
// Вывод => 10 Ученик

// Сначала будет вычитано 18 - 8 и получено 10,
// а затем эта десятка будет сложена со строкой.

// Работа строк и чисел с операторами

resultOne = "25" - 5;
console.log(resultOne);
console.log(typeof resultOne);
// Вывод => 20 - тип Number

resultTwo = 10 * "80";
console.log(resultTwo);
console.log(typeof resultTwo);
// Вывод => 800 - тип Number

// Недопустимые операции:

resultThree = 3 * "Ученик";
console.log(resultThree);
// Вывод => NaN

resultThree = "Ученик" * 3;
console.log(resultThree);
// Вывод => NaN

// Унарный оператор сложения: +
// Здесь оператор сложения играет
// роль преобразователя строк в числа

// Со строками

resultOne = +'25';
console.log(resultOne); 
console.log(typeof resultOne);
// Вывод => 25 - тип Number

// С числами

resultTwo = +10;
console.log(resultTwo);
console.log(typeof resultTwo);
// Вывод => 10 - тип Number (ничего не меняется)

// Ещё пример:

let users = "25";
let admins = "10";

console.log(users + admins);
// Вывод => 2510

console.log(+users + +admins);
// Вывод => 35

// Почему нам вывелось 35? потому что мы применили
// унарный оператор сложения к переменным и сделали
// их тип числом, а числа - складываются.

// Простыми словами: 25 + 10 = 35

// Приоритет операторов

// Разный приоритет:

resultOne = 2 - 1 * 5;
console.log(resultOne);
// Вывод => 3 (1 * 5 - 2)
// Тут выполнится сначала умножение а затем вычитание.

// Приоритет скобок:

resultTwo = (1 * 5) - 2;
console.log(resultTwo);
// Вывод => 3

// Равный приоритет:

resultThree = 5 - 2 - 1;
console.log(resultThree);
// Вывод => 2

// Оператор присваивания

let a = 1 + 2;
// Значение переменной a равно 1 + 2 (3).
let b = 2;
// Значение переменной b равно 2.
let result = 8 - (a = b + 4)

console.log("Результат в скобках: " + a);
// 5
console.log("Общий результат " + result);
// 3