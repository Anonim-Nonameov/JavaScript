// Числа

// В JS существуют 2 типа чисел - это обычные числа в 64-х битном
// формате (с которыми мы и будем чаще всего работать) и bigInt, числа которые
// позволяют работать с целыми числами приозвольной длины (или же просто ОГРООООМНЫЕ
// числа :-D). Но в этом уроке про числа, ФПЖ будет говорить только о простых числах.

// Записать простые числа в JS можно следующим образом -
// создать переменную с числовым значением и работать с ней дальше.
// Но мы выведем значение переменной в консоль:

// Число
let someNum = 458
console.log( )
console.log(someNum)

// Или же просто в console.log() написать интересующее нас число:

console.log( )
console.log(854)

// А десятичные числа пишутся ОБЯЗАТЕЛЬНО через точку, но выводятся
// в консоль они так же легко как и простые:

// Десятичные числа
let someNums = 4.58
console.log( )
console.log(someNums)

// А вот мы вызываем это же число просто через console.log():

console.log( )
console.log(8.54)

// А в ситуации, когда нам надо работать с крупными числами (или наоборот,
// оооооочень маленькими), к примеру миллион -
// мы можем написать это число простым способом:

let someBigNum = 1000000
console.log( )
console.log(someBigNum)

let someLittleNum = 0.000001
console.log( )
console.log(someLittleNum)

// Или же, мы можем сократить эту запись чтобы не прописывать целых 6 нулей.
// После цифры 1 надо добавить латинскую "e", и поставить после "e" цифру 6.
// Она будет значить, что мы хотим вызвать в консоль/записать в переменную миллион,
// ибо в миллионе - 6 нулей.

someBigNum = 1e6
console.log( )
console.log(someBigNum)

// Фактически, единичка умножается на миллион, на единицу с шестью нолями.
// Или, это 1 умножить на 10 в шестой степени - 1 * 10^6


// А мааааааленькие числа как записывать?
// Синтаксис схож с записью "1e6", т.е такие малюсенькие числа вкратце
// записывают почти так же, как и миллион, но после латинской "e"
// ставится знак минуса "-". Т.е "e" минус количество нулей - e-6.

someLittleNum = 1e-6;
console.log( )
console.log(someLittleNum)

// Фактически, единица делится на миллион, единицу с шестью нолями.
// Или, это 1 умножить на 10 в минус шестой степени - 1 * 10^-6

// Шестнадцатеричные, двоичные и восьмеричные числа

// Шестнадцатеричные числа широко используются в JS для представления цветов,
// кодировки символов и многого другого.

// Как записать число в шестнад. системе?
// Ну, пока что возьмем число 255. Синтаксис написания простой, но непонятный.
// Пишется всё вот так:

console.log( )
console.log(0xFF, '- 0xFF') // => 0xff => 255, шест. система счисления

// 0x - указывает на то, что это шестнадцатеричная система счисления.
// FF - указывает на кодировку/код числа.

// Причем регистр не имеет значения - написали мы 0xff или 0xFF.

// Реже используются двоичные и восьмеричные числа:

console.log( )
console.log(0b11111111, '- 0b11111111') // => 255, двоичная система счисления

console.log( )
console.log(0o377, '- 0o377') // => 255, восьмеричная система счисления

// 0b11111111 - из двоичной системы исчисления.

// 0b - указывает на то, что это двоичная система счисления.
// 11111111 - указывает на кодировку/код числа.

// 0o377 - из восьмеричной системы исчисления.

// 0o - указывает на то, что это восьмеричная система счисления.
// 377 - указывает на кодировку/код числа.

// Метод toString(base)

// Метод num.toString(base) возвращает строковое представление числа в той
// или иной системе счисления (base).
// base может принимать значения от 2 до 36 (да-да, это всё системы счисления).

let num = 255
console.log( )
console.log(num.toString(16), "- код числа \'255\' в шест. системе счисления") // => "ff"
console.log( )
console.log(num.toString(8), "- код числа \'255\' в восьмеричной системе счисления") // => "377"
console.log( )
console.log(num.toString(2), "- код числа \'255\' в двоичной. системе счисления") // => "11111111"

// Округление чисел

// Отлично, с вариантами записи чисел разобрались.
// Теперь посмотрим, что можно с ними делать! (на такие операторы, как умножение,
// деление, сложение, взятие остатка от деления и т.д смотреть не будем, ибо
// дурак поймет что с ними надо делать и как надо использовать.)

// В JS встроен объект Math, который содержит несколько функций для работы с числами:

// Math.floor - округляет число в меньшую сторону

let numOne = Math.floor(5.8), numTwo = Math.floor(2.2), numThree = Math.floor(-2.2)

console.log( )
console.log(numOne) // => 5
console.log( )
console.log(numTwo) // => 2
console.log( )
console.log(numThree) // => -3










// Э-э-э, ты куда спешишь? я позже допишу, ты не волнуйся!