// Что такое JavaScript.

// Когда создается веб-продукт (будь-то сайт, интернет-магазин, или веб-приложение) в нем
// учавствуют сразу несколько технологий. В любом случае, там будет HTML. Это язык разметки, т.е
// скелет нашего сайта. Потом, мы на этом скелете наращиваем "мясо" - добавляем стилистики.
// Это могут быть шрифты, цвета, расположение элементов и прочее. За всё это отвечает CSS - 
// это язык стилей. И дальше, всю эту конструкцию необходимо заставить работать. Для этого
// уже нужны языка программирования, в том числе и JS, PHP, базы данных и прочее.
// Но мы остановимся именно на JS.

// Вопрос:

// Для чего используется этот язык?

// Ответ: он используется для придания сайту интерактивности. В далекие 95-ые годы, сайты делались
// на таблицах, и грузились крайне медленно. Было принято решение ускорить их, и сделать так,
// чтобы реагировали на действия user'а. Тогда, кучка программистов закрылась у себя в комнате
// и принялись они создавать новый язык. Управились они за пару недель (быстро ж они), так как
// сроки уже поджимали.

// Вопрос:

// Почему язык называется JavaScript?

// Ответ: всё дело в популярности и желании хайпануть. Раньше, был популярен язык Java, и чтобы
// придать языку популярности было принято решение назвать его JavaScript. Сам язык никак не связан
// с Джавой, так что путать их - нельзя.

// Вопрос: что значит скрипт?

// Ответ: скрипты это как раз инструкции, которые должен выполнить браузер к моему сайту.
// Скрипты пишутся в отдельном .js файле, так и внутри index.html файлика, в теге script. Но,
// писать js код внутри html файла - плохая практика. Внутри html файла пишут только маленькие
// скрипты, всё остальное - внутри отдельного файла.

// Вопрос: как подключить скриптовый файл?

// Ответ: в html файле, у тега script прописываем атрибут src, а внутри кавычек пишем
// путь к файлу.

// Переменные: что это такое и как их применять.

// И первое с чего мы начнем наше изучение JS - с информации.
// В мире программирования всё состоит из информации.
// Это всякие теги на странице, файлы, и даже действия пользователя на странице.
// Всё это - информация, и для того чтобы в дальнейшем её использовать, нам
// необходимо её как-то сохранить и куда-то поместить. Для этого в программировании
// существуют переменные. Допустим, у нас есть какая-то информация - например, яблоко.
// Мы её хотим сохранить чтобы в дальнейшем её использовать. Но как?
// А мы берем коробку (наша переменная) и ложим яблоко в..
// А, нет! Перед этим нашу коробку надо как-то назвать, иначе мы потеряемся,
// если таких коробок будет множество. Наклеим на неё наклейку c надписью "apples",
// создавая  таким образом нашу переменную, нашу коробочку. И теперь, когда мы создали
// переменную, мы можем эту информацию использовать. Причем использовать её мы можем
// разными способами: можем как достать это значение (значение - информация, лежащая
// внутри нашей переменной), чтобы потом съесть его, например, или что-то другое сделать,
// или поменять это наше значение. Ну например мне надоело хранить в коробке яблоко,
// которое я так и не съел, и поместил туда апельсин. Всё, старого значения теперь нет,
// там теперь апельсин, другая информация.
// Именно так всё и работает. Теперь посмотрим на всё это в коде.

// Создать коробку, переменную, очень просто: для этого используются ключевые слова
// var, let и const. Что такое ключевое слово? это спец. слова, внесенные прямо
// в ядре языка, и используемые по умолчанию. var означает variable (англ. переменная),
// но использовать var - не рекомендуется т.к он уже устарел (старичок работает уже с 1995 года!),
// но мы сейчас его заиспользуем в качестве примера того, как создать переменную.
// let - аналог var. А const - условная константа, которую никак нельзя изменить.

// Придумываем наше название. Мы хотим, чтобы в нашей коробке хранилась числовая информация,
// значит имя коробки должно быть "number". Чтобы присвоить переменной значение, надо после
// её названия поставить знак равенства = (в js он выступает в роли присваивалки значений), и после
// этого знака написать значение и поставить точку с запятой, это очень важно (почему так -
// я объясню, но чуть позже):

var number = 5;

// var - ключевое слово для создания переменной.
// number - название нашей коробки, переменной.
// = - этот знак присваивает значение нашей переменной.
// 5 - сама информация, лежащая внутри переменой.
// ; - спец. символ, обозначающий то, что наша "команда" - завершилась тут, это точка остановки.

// Таким образом, у нас есть готовая переменная с некой информацией. Круто!
// Но прежде чем её использовать я скажу, что то что мы сделали - называется не "создание"
// переменной, а "объявление". Технически мы её создали, но почему-то это принято называть
// "объявление переменной". Т.е мы объявляем в нашем файле, что теперь у нас есть такая-то
// переменная с таким-то значением.
// Теперь мы можем её использовать. В этом нам поможет команда "alert()", которая
// выводит в браузере диалоговое окно с какой-то информацией.
// Внутри скобок мы напишем название нашей переменной - "number", таким образом
// мы дадим понять нашей функции, что она должна вывести значение нашей переменной на страницу.

// UPD:  13.09 / 7:57 - закомменитировал вызов впл. окна, т.к консоль node такое
// поддерживает, и всё ломается.
// alert(number);

// Если мы сейчас зайдем на нашу страничку в браузере, нам покажется диалоговое окошко
// с надписью "5" (а это, собственно, значение переменной number). Значит всё работает!)

// Теперь мы напишем то же самое, только в современном виде:

let num = 10;

// Ничего не произошло, бомба не взорвалась. Отличается разве что ключевое слово и название
// переменной, да и значение тоже.
// И вот, теперь мы попробуем изменить наше значение. Я помню, что значение переменной num
// равно десяти, но я замению его на 7. Для этого достаточно написать название переменной,
// поставить знак равенства и написать НОВОЕ значение для нашей переменной. Делается всё это
// без ключ. слова let, т.к оно отвечает  именно за создание переменной, а она у нас уже
// объявлена.

num = 7;

// Всё, теперь num равен не 10, а равен 7.
// Таким образом, мы "прогнали" значение 10 из переменной (бедная десятка..) и присвоили другое.
// То же самое и с константами:

const pi = 3.14;
// pi = 5; - выдаст ошибку!

// Вся соль в константах заключается в неизменяемости значений.
// Менять их - нельзя, строго запрещено! Да и + ко всему - это разрушит нашу программу
// и остановит её выдав ошибку, что мы пытаемся изменить значение неизменяемой переменной.
// На самом деле, в JS как таковых констант НЕТ, и изменить значение константы МОЖНО,
// но очень сложно и это займет много-много времени.

// Ну а теперь  мы ближе посмотрим на var и let, и поймем, почему не рекомендуется
// использовать устаревший var, а рекомендуется использовать современные let и const.
// У var есть одна интересная особенность - по англ. она называется hoisting, а по Русски
// "всплытие". Что это значит?
// Если я сейчас объявлю переменную, присвою ей значение, то потом я могу его изменить:

var example = 10;
example = 15;

// В принципе всё нормально, так и должно быть, мы создали переменную а потом
// её поменияли (точнее значение переменной).
// Но, если я захочу изменить значение переменной ДО её создания - это сработает!

example2 = 15;
var example2 = 10;

// Это может показаться странным, ведь мы еще не создали такую переменную, её еще нет..
// но тем не менее так и должно быть, это нормально.
// А по простому - всё дело в том, что var переменная создается еще до того, как наш
// скрипт начал работать. Происходит это так:

// Когда браузер начинает запускать файл script1.js, он начинает ооочень быстро его просматривать.
// Находит переменную, объявленную через var (т.е - ищет такую переменную).
// Он их сначала создает, т.е коробка уже есть, но в ней ничего нет.
// После этого запускается скрипт, начиная с первой строки.
// Он идет по файлу, идет.. и вдруг видит - тут переменная начинает
// использоваться! (строка 137) в неё присваивается переменная три, и затем присваивается
// переменная пять. Это поведение и называется "всплытие" (hoisting), и конечно, когда
// кода намного намного больше, и конструкции сложнее - могут начать появляться ошибки.
// Поэтому куда очевиднее поведение, когда мы сначала создали переменную, и только
// потом мы можем её использовать.
// Но в случае с let - всплытие не произойдет, это поддерживает только var, а с let
// мы создаем переменную и только потом можем её использовать, и с const то же самое.
// Вообще, у var есть еще кое какие особенности по "области видимости", но об этом -
// в следующих уроках. Но сейчас нам (мне) необходимо понять, что в современном JavaScript'е
// используются let и const, var - устаревший формат, который канул в лету.

// Точка с запятой

// Новички в JS часто задаются вопросом: когда ставить точки с запятой?
// Как не трудно заметить, они у меня в коде стоят везде, в конце каждой строки.
// Их можно не ставить (я, например, раньше не ставил их), JS это простит, но всё
// таки их лучше СТАВИТЬ. Например, когда логическое утверждение завершено (например,
// когда мы объявили переменную) - не будет лишним поставить ; :)

// А теперь о ошибках, которые могут случиться если ; не ставить.
// Допустим, мы хотим вывести в браузер диалоговое окно с цифрой пять,
// и после этого мы делаем еще какие-то сложные действия:

// Закомментировал, чтоб ошибок не было.
// alert(5)
// [].push('a'));

// Нам выдаст ошибку, типа "что это за символ ]?"
// Всё из-за того, что мы не указали где наше логическое утверждение кончается.
// Браузер не знает, где кончается команда "alert(5)", и начинает "паниковать".
// Чтобы это не происходило - ставим ;

alert(5);
[].push('a');

// Но чтобы ошибку увидеть, надо убрать комментарии с кода на 177 и 178 строке
// и потом зайти в браузер, нажав ctrl + shift + i.
// Таким образом, откроется консоль разработчика. Консоль разраба это "помощник"
// верстальщика, где на первой вкладке можно увидеть весь HTML и CSS код, где стоят
// отступы и какие, стили примененные к элементам и т.д.
// Но нас интересует вторая вкладка - "Console"!
// Там мы можем отслеживать ошибки кода, писать туда что-то важное и т.д.
// Подробнее можно прочитать в гугле :)

// Хорошо, теперь мы разобрались с точкой с запятой, узнали об ошибках и консоли,
// узнали что такое переменная и как с ней работать.
// Но мы не знаем какой тип данных туда можно отправить, т.е какая информация там
// может располагаться? а об этом - в след. уроке!

// Типы данных и взаимодействие с пользователем

// Что такое типы данных?
// Типы данных - это та информация, которую мы можем использовать в своих скриптах.
// Это может быть что угодно, и у них есть своя классификация, с которой мы ознакомимся (в
// текстовом виде, конечно).
// Типы данных разделяются на две большие группы - простые и сложные (комплексные), а по
// другому - объекты.
// Начнем с простых типов данных.

// Первым типом данных из простых идут числа.
// Это один из самых легких и простых типов данных, и с ним мы можем обозначать цифры
// по порядку - 1 2 3, или считать сумму зарплаты за месяц - 1000, 2000, 3000 и т.д, или
// считать кол-во пользователей посетивших наш сайт. Всё это отображается в числовом виде.

// Следующих тип данных - строки.
// Ни для кого не секрет, что если записать какое нибудь выражение, например "Иван",
// это уже не будет числом. Это будет какое-то описание, т.е то что мы можем написать как
// обычную строку. Так что если мы что-то пишем в виде текста - это строка.
// Попробуем записать какую нибудь информацию в переменную, например ту же строку -

let myName = "Alex";

// Ну вот, теперь наша переменная содержит в себе строку, текстовую информацию.
// Важно знать - текстовая информация ВСЕГДА содержится в кавычках, и в JavaScript'е
// неважно какие мы используем - одинарные, двойные или обратные (``).


// Кстати, мы написали "My name" как "myName". Что это значит?
// Это такой стиль написания названия переменных, camelCase (верблюжий регистр).
// Допустим, название нашей переменной состоит из двух, трех и более слов, и как нам создать
// переменную с таким названием? ведь пробелы в названии переменных не допустимы!
// Разделять всё это при помощи тире "-", или нижнего подчеркивания "_" - не красиво,
// и люди придумали специальные стили для написания имен переменных. Самым популярным
// считается camelCase. При использовании этого стиля, первое слово в переменной пишется с
// маленькой буквы, все остальные - с большой, заглавной.
// Ну, например слова "My name" мы запишем
// как "myName", или "My apple" как "myApple", или "My personal computer" как
// "myPersonalComputer" и т.д.

// Следующий тип данных - логический (булевый).
// Он содержит в себе либо правду, либо ложь (true & false).
// Создаем реальную конструкцию. Если вы читаете это с компьютера - то вы отвечаете "да,
// это правда", или по другому - true. А если с телефона - то это ложь (false).
// Соответственно, вот такие вот логические утверждения будут содержаться в нашем коде и мы
// будем их использовать. Например, в коде мы можем проверить - открыто ли модальное окно.
// Если вдруг окно открыто, мы получаем булевое значение - true, ну и в зависимости от этого
// ответа мы можем уже какие-то действия выполнить, или наоборот - запретить.
// Например - если открыто модальное окно, пользователь не может скроллить страницу.
// А теперь создадим переменную с булевым значением:

let bool = true;

// Ну вот, теперь в нашей переменной содержится логическая информация (true).

// Следующие два типа данных - null и undefined.
// Различать их довольно просто, главное ПОНЯТЬ как они работают.
// null - это когда чего-то просто НЕ СУЩЕСТВУЕТ, его нету.
// undefined - это когда что-то есть, что-то существует, но у него нет значения.
// А теперь разберем на простых примерах.

// Изменим значение несуществующей переменной "modal":

modal = 'игзампл оф код ин жс';

// Попытаемся вызвать диалоговое окно с несуществующей переменной "a":

// alert(a); (закомментировал, т.к это вызывает ошибку)

// Если мы попытаемся вызвать диалоговое окно с переменной modal - это выдаст
// нам ошибку, что перем. modal - не объявлена (такой переменной нет!), это undefined.
// А что касается несуществующей переменной "a", с которой мы хотим вызвать диалог. окно
// на 269 строке, то её НЕТУ, вообще нету, а это - undefined.
// Если мы раскомментируем код на 269 строке и откроем, перезагрузим наш
// браузер, в консоли нам выдаст оишбку - "a is not defined" и код выполняться дальше
// не будет (как раз по этому я его закомментировал).

// Еще один пример - создадим переменную modal2, но не зададим ей никакого значения:

let modal2;

// Мы взяли коробку, наклеили на неё наклейку с названием, но внутрь ничего
// не поставили, она пустая - это и есть значение undefined, "неопределённое".
// Чуть позже мы узнаем, как получить такое значение в консоль, а сейчас идем ко следующему
// типу данных.

// Следующие типы данных - symbol & bigint.

// Symbol и bigint появились совсем недавно.
// symbol - это технический тип данных (не понял что это значит, ну да ладно),
// который появился в стандарте ES6. По факту верстальщики редко с ним сталкиваются,
// так что пока надо просто знать что он есть.
// А вот bigint появился совсем недавно - летом 2019, в самом последнем ES
// стандарте (на момент создания урока). Если говорить о bigint'е совсем по простому,
// то это ОЧЕНЬ большие числа, которые не влазеют ни в какой диапазон.
// bigint (расшифровывается также как big integer) это числа, которые больше чем
// 2 в 53 степени. Дело в том, что у обычного типа данных number есть, так
// скажем, свой собственный лимит. Если мы запишем число в типе данных number,
// которое больше чем 2 в 53 степени - у нас могут появиться ошибки с
// обработкой таких чисел. Именно поэтому был создан отдельный тип данных, bigint,
// как раз туда включаются все числа из этого диапазона. Т.е, это такое
// хранилище таких огроооооомных чисел :D

// А теперь пора бы на простых примерах поговорить о массивах и о объектах.

// Сначала возьмем какую-то информацию, например апельсин.
// Мы же можем его как-то описать, верно? верно!

// Скажем, что: категория - фрукт.
// Форма: круглая.
// Цвет: оранжевый.
// Вес: 300 грамм.

// И сейчас мы описали какую-то конструкцию, информацию - в деталях, и то же самое
// мы можем сделать в коде. Т.е, в коде мы можем что-то описать при помощи такой
// же конструкции, объекта.
// Объекты состоят из двух внутренних "категорий", свойства и метода (не понял,
// почему не "значения"). И вот, на примере апельсина мы описали все его 
// свойства: категория, форма и так далее, т.е что он может в себя включать, или
// как нам его можно описать.
// И не трудно заметить, что объект как комплексный тип данных может включать
// в себя различные типы данных. Это значит, то что мы описали апельсин как "фрукт",
// это строка, string. Описали то, что он весит 300 грамм - а 300 это число, number.
// И, соответственно, свойтва могут содержать ЛЮБЫЕ типы данных.
// И даже можно создать объект в объекте, который находится в объекте, который
// находится в объекте и так далее, это возможно. (:D)
// И я еще сверху написал про "методы". Любая конструкция может не просто
// существовать, она также может что-то делать. Ну, апельсин вряд-ли может что-то
// делать - максимум сгнить :D Поэтому, возьмем другой пример - пылесосъ.
// Пылесос, как объект, можно описать:
// 1. - опишем его модель
// 2. - его вес
// 3. - его МООООЩНОСТЬ!!!;
// И, соответственно, он может что-то делать. Например - пылесосить пыль (блин,
// как же странно и глупо это звучит.. :D) на нашем полу.

// Собственно, объекты служат нам чтобы мы могли описывать какие-то сущности.
// Эти сущности могут быть на нашем сайте - например модальное окно.
// Мы можем описать его ширину, высоту, что он умеет делать (закрывать что-то,
// отправлять формы и т.д), как открывается и прочее-прочее.
// Таким образом, при помощи объекта как комплексного типа данных мы можем
// всё это красиво и опрятно описать.
// Ну вот, с объектами разобрались - теперь о массивах.

// Для начала скажем, что массив - "детище" объекта, это не отдельный тип данных.
// А теперь: что же такое массив? Массив - конструкция, позволяющая нам записать
// какие-то данные ПО ПОРЯДКУ, строго по порядку. Что это значит? например, если
// мы хотим создать массив из каких-то вещей, то мы берем одну вещь, ставим запятую и
// следом за ней ставим другую вещь, и таким же образом ставим третий предмет.
// Таким образом у нас получается строгий порядок в массиве. И так же как в объектах,
// нам не важно какие элементы хранятся в массиве. Это могут быть числа, строки,
// объекты, другие массивы и функции. Так что массивы служат для расположения
// элементов (вообще любой информации) строго по порядку, и это их основное
// предназначение. Как реальный пример, мы можем взять и написать список ссылок
// на каике-то картинки (ЧЕРЕЗ ЗАПЯТУЮ), и потом их использовать. Или список
// заголовков и т.д.

// В коде объекты создаются просто: также через ключ. слово let, названия, знака
// равно (присваивания в JS), фигурных скобок и ;. Внутри фиг. скобок как раз и будут
// располагаться наши свойства. Объект можно создать, но внутрь ничего не записывать!
// Т.е, мы создаем объект, пишем фиг. скобки - но внутри их никак не заполняем.
// Таким образом объект создается, но не используется.
// Создадим наш первый объект, а первым свойством будет dog со значением "Puppey" и
// свойство cat, со значением "Murrr":
 
let obj = {
	dog: "Puppey",
	cat: "Murrr"
};

// Если нам в объекте нужно больше 1 свойства, то мы ставим запятую и прописываем
// следующее. Желательно ставить запятую даже на самом последнем свойстве, чтобы
// мы могли перемещать свойства как хотим - самое последнее в самое начало, самое
// первое свойство на место самого последнего и так далее.
// И да - свойствами объекта может быть что угодно: массивы, строки, числа, и даже
// другой объект может быть свойством.

// А как нам создать массив? всё очень просто - используем ключ. слово let,
// придумываем название и пишем его, ставим знак равно и пишем квадратные скобки,
// а в конце как обычно стоит ;.
// Опять же - мы можем оставить массив пустым, т.е просто создать его и всё, его
// необязательно заполнять. Но мы таки заполним его:

let arr = [1, "str", false];

// Ну вот - массив создан, теперь мы можем его использовать.
// Кроме того, мы можем "взять" элемент из массива - для этого мы записываем имя
// нашего массива, ставим квадратные скобки и указываем его позицию, индекс.
// Позиции элементов в JS начинаются с 0, т.е - в нашем массиве элемент "1"
// занимает нулевую позицию, а элемент "str" занимает первую позицию. А какую
// позицию занимает элемент "false" - не трудно догадаться :)
// А чтобы узнать кол-во индексов в массиве, достаточно знать его длину: кол-во
// индексов в массиве равно его длина - 1. Т.е, если его длина равна 5 (5 элементов
// внутри массива), то кол-во индексов - 4.

arr[0];

// А еще мы можем ИЗМЕНЯТЬ элементы массива. Для этого опять же прописываем его имя,
// ставим квадратные скобки, но на этот раз после квад. скобок ставим знак равно (=)
// и после него записываем новое значение:

arr[0] = 2;

// Теперь в нашем массиве элемент "1" заменен на "2".
// Было: [1 "str" false]
// Стало: [2 "str" false]

// А теперь пора бы научиться работать с консолью. О том что такое консоль я уже писал,
// так что сразу про команду которая будет что-то выводить в консоль: console.log().
// console.log() выводит значения в консоль, неважно какие - значения переменных,
// массивов, свойств объекта и т.д. Также в скобках можно написать простую строку:

// console.log("Hello World!") (закомментировал, лишнее - просто как пример) 

// Код выше выведет в консоль всем известную фразу, Hello world :D
// Значит так: эта команда может выводить не только значения переменных, массивов
// и объектов - она может выводить и простые строки, числа и булевые значения
// (True/False). Вообще, console.log() самая простая команда для проверки нашего
// кода, а именно: проверка на существование переменной, есть ли такой-то элемент
// в массиве (или объекте) и т.д. Это то мы сейчас и будем делать.
// Не так давно я создавал переменную modal2, но не задал ей значение. Сейчас то
// мы и проверим, что находится внутри неё:

console.log(modal2);
// => undefined

// Если мы сейчас зайдем в консоль браузера, то заметим, что в консоли появилась
// надпись "undefined" - это и есть значение нашей переменной.
// Об этом типе данных мы не так давно говорили - это когда что-то существует,
// но значения никакого оно не имеет.
// Но, мы создавали переменную "myName", а у неё есть значение - его то мы и
// выведем в нашу консоль:

console.log(myName);
// => "Alex"

// И опять же - JS "прощает" некоторые ошибки, которые мы можем допустить в нашем
// коде, ибо JS и был для этого создан - для "не программистов" (это из разряда
// "верстальщики - не программисты").
// Ну так вот - попробуем выполнить какую нибудь неочевидную операцию, например -
// будем делить 4 на 0 и результат выведем в консоль:

console.log(4 / 0);
// => Infinity

// Ну вот - даже если произошла не математическая операция, то что сделать действительно
// нельзя - у нас не вылезет ошибка, а специальное значение - Infinity, бесконечность.
// Оно выдается тогда, когда мы делаем ошибку в математическом выражении. Это значение
// не крашит код, но всё же означает ошибку.
// Кстати, можно даже получить "минус бесконечность" - -Infinity:

console.log(-4 / 0);

// Кстати - значение "Бесконечность" входит в тип данных "числа".
// И да - есть еще один не логичный момент - выдача значения NaN.
// NaN означает "not a number", не число. Его выдает в том случае, когда мы хотим
// сделать ту мат. операцию, которая выходит за рамки всех законов - например,
// складываем строку с числом:

console.log("string" + 9);
// => NaN

// Остальное допишу послезавтра)